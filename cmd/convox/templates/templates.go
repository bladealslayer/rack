// Code generated by go-bindata.
// sources:
// templates/init/django/.dockerignore
// templates/init/django/Dockerfile
// templates/init/django/docker-compose.yml
// templates/init/rails/.dockerignore
// templates/init/rails/Dockerfile
// templates/init/rails/docker-compose.yml
// templates/init/ruby/.dockerignore
// templates/init/ruby/Dockerfile
// templates/init/ruby/docker-compose.yml
// templates/init/sinatra/.dockerignore
// templates/init/sinatra/Dockerfile
// templates/init/sinatra/docker-compose.yml
// templates/init/unknown/.dockerignore
// templates/init/unknown/Dockerfile
// templates/init/unknown/docker-compose.yml
// templates/templates.go
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _initDjangoDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xce\xcf\x2b\xcb\xaf\xe0\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\x01\x13\x99\xe9\x79\xf9\x45\xa9\x5c\x80\x00\x00\x00\xff\xff\x57\x31\x5f\xce\x1d\x00\x00\x00")

func initDjangoDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerignore,
		"init/django/.dockerignore",
	)
}

func initDjangoDockerignore() (*asset, error) {
	bytes, err := initDjangoDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/.dockerignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xcd\xae\xd3\x30\x10\x85\xf7\x79\x8a\x91\x60\xdb\x66\xd1\x27\x40\x25\x2c\x40\xb4\x51\x28\x48\x5d\x21\xe3\x4c\x52\x17\xc7\x63\xfc\x03\x8d\x50\xdf\x9d\xb1\xd3\xd0\xe6\xde\xbb\xb8\xbb\xcc\xf1\xcc\x99\x6f\x4e\x3e\x34\xfb\xcf\x20\xc9\xfc\xa6\x4b\xd9\x9e\x85\xe9\xa9\x28\xde\x80\x43\xab\x85\x44\xc0\x8b\x18\xac\x46\x61\x2d\x08\xd3\xce\xa5\x75\x74\x46\x19\x20\x10\x04\xa1\x34\x39\x08\x27\x04\x35\x88\x1e\x93\x36\x52\x74\x70\xeb\x61\xaf\xba\xd9\x7f\xac\xb6\x07\x50\x1e\x84\xf6\x04\xd1\x63\x0b\x3f\x46\xe8\xa3\x51\x92\x9c\x01\x65\xf2\xfc\x02\x02\xde\x93\xfc\x89\xae\x53\x1a\x8b\x6a\xf7\x0d\xde\xd5\xf5\x03\x4c\x96\x66\xdf\x25\x54\xa2\x17\x06\x70\xb0\x61\x84\x2f\xd5\xb6\xa9\x0e\xdf\x3f\x55\x47\x68\xa3\x53\xa6\x87\x41\x18\xa6\x5c\xdb\x91\xd7\x0d\x5c\xb4\x1e\xfe\x28\xad\xf9\x60\x1f\x75\x48\x28\x69\xd8\x39\x72\x79\xc7\x83\x41\x47\x39\x19\x49\x3c\x4b\x46\x8f\x99\x39\xf1\x79\x30\x88\x2d\xdf\xd4\x71\x10\x56\x59\x36\xf1\x41\x68\x5d\x6c\xf7\xf5\x91\x8d\x7f\x45\xe5\x70\x40\x13\xfc\x3a\x5c\x02\x94\xcc\x5f\x3e\x55\x8b\xe6\xeb\x2e\xcd\x6e\xe6\x61\x58\xad\xa2\xed\x9d\x68\x31\xc9\x2f\x3c\xbb\x67\xce\xaf\xa0\x93\xa4\x35\x67\xc4\x16\x41\xc9\x89\xef\xed\x5f\x8e\xf6\x5a\x4e\xd2\x04\xb7\x90\xe6\xae\x5b\xda\xd7\xb9\x65\xae\xa7\xf7\x7b\xac\xf9\xf9\x7f\x39\x81\x8f\xe1\x44\x66\xb3\xc8\xfe\x81\x83\x4f\x35\xa4\x8c\x8d\xf7\x0b\x12\x3c\xff\x91\x00\xd4\xe5\xef\xf4\xcb\xf3\x9e\x75\xf6\x2f\xfe\x05\x00\x00\xff\xff\x22\xcb\xe6\x65\xb5\x02\x00\x00")

func initDjangoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerfile,
		"init/django/Dockerfile",
	)
}

func initDjangoDockerfile() (*asset, error) {
	bytes, err := initDjangoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initDjangoDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8d\xc1\xaa\xc2\x30\x10\x45\xf7\xfd\x8a\xfc\xc0\xcb\x8b\x36\x82\x04\xba\x92\xae\xdc\xa9\x1b\x57\x92\xb4\x43\x09\xa6\x99\x92\x4c\x6b\xfd\x7b\x13\x68\xbb\x10\xdc\xcd\xbd\xf7\x70\xe6\x05\x46\x15\x8c\x99\xd1\xba\x56\x31\x9e\x4e\xf0\x93\x0d\xe8\x7b\xf0\x94\x17\xc6\xfe\xd8\xb5\x3e\x5d\xea\xdb\xe3\x5c\xdf\x53\xe1\xb4\x01\x17\xd7\xa9\x41\x3f\xe1\xcc\x07\x0c\xc4\xa5\x2c\xf9\x10\x90\xb0\x41\x57\x91\x8b\xbf\x91\xf9\x5d\x51\x18\x21\xdb\xac\x7f\x6e\xb2\x56\x93\x36\x3a\xe6\x3e\xd3\x5b\x7f\x14\x4a\x0a\x21\x96\x94\x1c\x39\xee\x8a\x15\xcf\x98\xed\x75\x07\x6a\xf9\xf5\x3f\x60\xa4\x2e\x40\xfc\x16\x1d\x64\xb9\x2f\x3e\x01\x00\x00\xff\xff\x25\x21\x30\xfe\xf3\x00\x00\x00")

func initDjangoDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initDjangoDockerComposeYml,
		"init/django/docker-compose.yml",
	)
}

func initDjangoDockerComposeYml() (*asset, error) {
	bytes, err := initDjangoDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/django/docker-compose.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x97\x7e\x4a\x92\xbe\x96\x5e\x71\x61\x4e\x66\x49\xaa\x31\x2a\x4f\x37\x2b\xbf\xb4\x28\x2f\x31\x87\x4b\x3f\x27\x3f\x5d\x5f\x8b\x4b\xbf\x24\xb7\x80\x0b\x10\x00\x00\xff\xff\xa0\x04\x95\x56\x4e\x00\x00\x00")

func initRailsDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerignore,
		"init/rails/.dockerignore",
	)
}

func initRailsDockerignore() (*asset, error) {
	bytes, err := initRailsDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/.dockerignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x50\xbb\x4e\xc4\x30\x10\xec\xfd\x15\x2b\xd1\x5f\x7a\x5a\x24\xa8\xe0\x50\x24\x0a\xba\xf3\x39\xeb\x60\xe2\xd8\x96\x1f\x27\xf2\xf7\x6c\xd6\x09\x21\xa7\xa4\xca\x3c\xec\x99\xf1\x73\x7b\x7e\x05\xe5\xdd\xcd\xff\x34\x51\x1a\x9b\x84\x78\x20\x1c\x26\xf0\xce\x4e\x90\xbf\x10\xb4\xb1\x98\xc0\x21\x76\xd8\x81\xf6\x11\xae\xc5\x75\x16\xc1\xb8\x94\xa5\xb5\xe4\x2f\x4e\xf9\x71\x44\x97\xd9\x7f\x43\xd7\xf9\xd8\x28\xa9\x08\x58\xe3\xc8\xa9\x61\xf2\x05\x2e\xcb\xc1\x20\xd5\x20\x7b\xbc\xcc\x64\x84\x1e\xc7\x24\x9e\xce\xef\x9f\xf0\x82\xe3\x9c\x05\xfc\x35\x32\x84\x66\x61\x76\xf2\xc9\x7a\x35\xec\x64\x66\xa8\x06\xbb\x76\xe9\xec\xfa\xcf\x88\xf6\xe3\xed\xbe\xff\x3a\xf8\xbb\xa4\x7c\x3c\x58\xa6\x84\x39\x3d\x86\x88\xb4\x33\xfc\x15\x6a\xe5\x80\x4b\x61\x0e\x5a\x71\x55\xe9\x51\xb5\xe9\xb7\x2d\x15\x57\x2d\x94\xab\x35\x6a\xd3\x2a\xae\xda\x8c\x6b\x60\xd5\x36\xcc\xe5\x23\x85\x1c\x14\x5a\x47\xcc\xfd\x23\xd2\x10\xaf\xf9\x9f\x4e\xd7\x6b\x4f\x7c\x9b\xf8\x0d\x00\x00\xff\xff\x08\xae\x24\x4e\xf0\x01\x00\x00")

func initRailsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerfile,
		"init/rails/Dockerfile",
	)
}

func initRailsDockerfile() (*asset, error) {
	bytes, err := initRailsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRailsDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initRailsDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRailsDockerComposeYml,
		"init/rails/docker-compose.yml",
	)
}

func initRailsDockerComposeYml() (*asset, error) {
	bytes, err := initRailsDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/rails/docker-compose.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initRubyDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerignore,
		"init/ruby/.dockerignore",
	)
}

func initRubyDockerignore() (*asset, error) {
	bytes, err := initRubyDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/.dockerignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcd\x4e\xc0\x20\x10\x84\xef\x3c\xc5\x26\xde\xcb\x43\x98\xe8\x49\x6b\x9a\x78\xf0\x56\x0a\x4b\x6d\x0a\xbb\x84\x9f\x46\xde\x5e\x8a\x35\xb1\x72\x62\x67\xbf\x61\x86\xa7\x69\x7c\x01\xcd\x74\xf0\x97\x8c\x65\xa9\x42\x3c\xb4\x31\x54\x60\x72\x15\xf2\x27\x82\xdd\x1c\x26\x20\x44\x83\x06\x2c\x47\x58\x0a\x19\x87\xb0\x51\xca\xca\xb9\xc6\x17\xd2\xec\x3d\x52\xee\xfc\x81\x64\x38\x4a\xad\x74\x1b\xdc\x46\x8d\xb4\x50\xb9\xc0\x7c\x19\x83\xd2\xbb\x5a\x71\x3e\xc5\x08\x2b\xfa\x24\x1e\xc7\xb7\x0f\x78\x46\x7f\x66\x41\x3f\x52\x85\x20\x2f\xe5\xb6\x1e\x1c\xeb\xfd\xb6\xee\x4a\xab\xd1\xa9\x5b\x7a\xa7\xfe\x2a\x62\x7a\x7f\xfd\xdf\xff\xf7\xc3\x67\xf7\x88\x29\x03\xdb\x7e\x6f\xde\x9f\xe0\xa1\xbf\x23\xbe\x03\x00\x00\xff\xff\x8b\xae\xa0\xae\x2a\x01\x00\x00")

func initRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerfile,
		"init/ruby/Dockerfile",
	)
}

func initRubyDockerfile() (*asset, error) {
	bytes, err := initRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initRubyDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8c\xc1\x0a\x83\x30\x0c\x86\xef\x3e\x45\xf0\x6e\xe9\x98\x87\x21\xf8\x30\x5a\x03\xca\xa2\x29\x69\x3a\xed\xdb\x2f\x85\x6d\xb7\xdd\xfa\xf5\xff\xf2\x9d\x38\x0f\x0d\xc0\x9c\x37\x5a\x06\x70\xf6\x0c\xbc\xef\xd3\x61\x80\x61\x65\x68\x71\xd9\x14\x16\x0e\x4f\x94\xce\xa6\xc8\x09\x5d\xd9\x09\xce\x4d\x57\x28\x9c\x05\x92\x4e\xa2\x39\x7e\x0f\x5b\x6b\xd0\x34\x23\xa5\x1a\x06\xe8\x6c\x38\x5e\x7c\xb9\xc8\xa2\xae\xef\xef\x2e\x0a\x2b\x07\xa6\x51\x29\xfd\x57\xae\x32\xaa\x64\x34\xa1\xfe\xfe\x62\x0f\x3f\xf4\xde\xfb\x0f\x99\x5b\xf1\xd6\xbc\x03\x00\x00\xff\xff\xae\x01\x4e\xf5\xc8\x00\x00\x00")

func initRubyDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initRubyDockerComposeYml,
		"init/ruby/docker-compose.yml",
	)
}

func initRubyDockerComposeYml() (*asset, error) {
	bytes, err := initRubyDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/ruby/docker-compose.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xd7\x4b\x2a\xcd\x4b\xc9\x49\xe5\xd2\xd7\x4b\xce\xcf\x2b\xcb\xaf\x00\x32\x52\xf3\xca\x80\x64\x7a\x66\x09\x17\x20\x00\x00\xff\xff\xc9\x68\x92\x70\x1e\x00\x00\x00")

func initSinatraDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerignore,
		"init/sinatra/.dockerignore",
	)
}

func initSinatraDockerignore() (*asset, error) {
	bytes, err := initSinatraDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/.dockerignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xc1\x6e\x84\x20\x10\x86\xef\x3c\xc5\x24\xbd\xcb\x43\x34\x69\x4f\xad\x8d\x49\x0f\xbd\x49\x61\x70\x89\x30\x43\x00\xcd\xfa\xf6\x8b\xac\x9b\xac\xeb\x49\xbe\xf9\x86\xff\xe7\x63\xe8\xbf\x40\x33\xad\x7c\x95\xd9\x91\x2a\x49\x09\xf1\x56\x49\xdc\x80\xc9\x6f\x50\x2e\x08\xd6\x79\xcc\x40\x88\x06\x0d\x58\x4e\xf0\xbf\x90\xf1\x08\x8e\x72\x51\xde\x57\x7f\x21\xcd\x21\x20\x95\xe6\xaf\x48\x86\x93\xd4\x4a\xd7\x83\x77\x54\x4d\x0b\x1b\x2f\x30\x1e\x8b\x51\xe9\x59\x4d\x38\xee\x30\xc1\x84\x21\x8b\xf7\xfe\xe7\x0f\x3e\x31\xec\x59\xd0\x3e\xa9\x62\x94\x07\x39\x8d\x3b\xcf\x7a\x3e\x8d\x1b\xa9\x35\x9a\x75\x4a\x6f\xd6\x33\x11\xc3\xef\xf7\x6b\xff\xc7\x83\xf7\xee\x09\x73\x01\xb6\xed\xbf\xee\xde\x83\xbb\x76\x8f\xb8\x05\x00\x00\xff\xff\x9c\x51\x49\xbe\x2d\x01\x00\x00")

func initSinatraDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerfile,
		"init/sinatra/Dockerfile",
	)
}

func initSinatraDockerfile() (*asset, error) {
	bytes, err := initSinatraDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initSinatraDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4f\x4d\xb2\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\x03\x32\x73\x12\x93\x52\x73\x8a\x41\x82\x0a\x0a\xba\x0a\xc9\xf9\x79\x65\xf9\x15\x7a\x05\xf9\x45\x25\x7a\x26\x26\xc6\x7a\x05\x45\xf9\x25\xf9\xc9\xf9\x39\xb6\x25\x39\xc5\xb8\x95\x54\x54\xda\x96\x14\x95\xa6\x02\x15\x80\x44\xe1\x86\x59\x18\x58\x99\x18\x18\x18\x40\x79\x40\xb5\x20\xae\x21\x17\x20\x00\x00\xff\xff\xc0\xe1\x22\xef\x84\x00\x00\x00")

func initSinatraDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initSinatraDockerComposeYml,
		"init/sinatra/docker-compose.yml",
	)
}

func initSinatraDockerComposeYml() (*asset, error) {
	bytes, err := initSinatraDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/sinatra/docker-compose.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\x4b\xcd\x2b\xe3\xd2\x4b\xcf\x2c\xe1\x02\x04\x00\x00\xff\xff\x9c\x10\x28\x7b\x0a\x00\x00\x00")

func initUnknownDockerignoreBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerignore,
		"init/unknown/.dockerignore",
	)
}

func initUnknownDockerignore() (*asset, error) {
	bytes, err := initUnknownDockerignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/.dockerignore", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x72\x0b\xf2\xf7\x55\x28\x4d\x2a\xcd\x2b\x29\xb5\x32\x34\xd3\x33\x30\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\x4f\x2c\x28\xe0\x02\x04\x00\x00\xff\xff\xf1\xa3\x65\xfc\x1f\x00\x00\x00")

func initUnknownDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerfile,
		"init/unknown/Dockerfile",
	)
}

func initUnknownDockerfile() (*asset, error) {
	bytes, err := initUnknownDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _initUnknownDockerComposeYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4d\xcc\xcc\xb3\xe2\x52\x50\x48\x2a\xcd\xcc\x49\xb1\x52\xd0\xe3\x02\x04\x00\x00\xff\xff\xa6\xe1\xc1\x85\x11\x00\x00\x00")

func initUnknownDockerComposeYmlBytes() ([]byte, error) {
	return bindataRead(
		_initUnknownDockerComposeYml,
		"init/unknown/docker-compose.yml",
	)
}

func initUnknownDockerComposeYml() (*asset, error) {
	bytes, err := initUnknownDockerComposeYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "init/unknown/docker-compose.yml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9b\x59\x6f\x23\xc7\x11\xc7\x9f\xc5\x4f\x31\x16\x60\x43\x0a\xd6\xd2\x1c\x9c\x4b\x80\x5f\xbc\xeb\x00\x7e\x88\x0d\xf8\x78\x08\xb2\x81\x31\x47\x8f\xc2\x58\x22\x37\x24\x65\x4b\x5e\xf8\xbb\xa7\x7f\x55\x35\x22\x57\x1c\x52\x5a\x4a\x82\x95\x63\x81\x59\x91\x3d\xdd\xd5\x55\xdd\x55\xff\x3a\xba\x79\x7a\x1a\xbc\x9e\xb5\x2e\x38\x77\x53\x37\xaf\x96\xae\x0d\xea\x9b\xe0\x7c\xf6\x79\x3d\x99\xb6\xd5\xb2\x3a\x19\xf9\x0e\x8b\xd9\xd5\xbc\x71\x8b\x33\x3e\x2f\xdd\xe5\xbb\x0b\xdf\x6f\x71\x3a\x99\x4e\x96\xa7\xed\x3f\xab\xe9\xf9\xec\xf4\xa4\x9d\x35\x3f\xbb\xf9\xe4\x7c\x3a\x9b\xbb\xed\xdd\xde\x48\xaf\x6e\x72\xb1\xa3\x8f\x52\xfa\xbc\x99\x5d\xbe\x9b\x2d\xdc\xc9\xcd\xe5\xc5\x40\xdf\x79\x35\xb9\x58\xdc\x3b\xab\xf6\xda\x39\xa9\x76\x79\xd8\x9c\x57\xf5\xcd\xfd\x53\xd2\x69\xf7\x8c\xf4\x78\xd0\x84\x8b\xc9\xb4\x5a\xce\xab\x7b\xe7\xec\xfb\xed\x9c\xb6\xef\xf4\xa0\x99\xaf\xa6\x3f\x4f\x67\xbf\x4e\xef\x9d\xb9\xef\xb7\x73\xe6\xbe\xd3\x7d\x33\xdf\x7e\x3a\x39\x9f\xf1\xe6\xcd\xb7\xc1\x37\xdf\xfe\x10\x7c\xf5\xe6\xeb\x1f\x3e\x19\x8d\xde\x55\xcd\xcf\xd5\xb9\x5b\xf5\x1f\x8d\x26\x9e\xd0\x7c\x19\x1c\x8d\x0e\x0e\xeb\x1b\xdf\x72\xe8\x3f\x40\x7d\xee\x16\x8b\xd3\xf3\xdf\x26\xef\x68\xe8\x2e\x97\xfc\x99\xcc\xf4\xff\xd3\xc9\xec\x6a\x39\xb9\xe0\xcb\x4c\x06\xbc\xab\x96\xff\x38\x85\x73\x3e\xd0\xb0\x58\xce\x27\xd3\x73\x79\xb7\x9c\x5c\xba\xc3\xd1\xf1\x68\xd4\x5d\x4d\x9b\xc0\x2c\xe2\x3b\x57\xb5\x47\x7c\x08\xfe\xf6\x77\xa6\x7d\x15\x4c\xab\x4b\x17\xe8\xb0\xe3\xe0\xa8\x6f\x75\xf3\xf9\x6c\x7e\x1c\xbc\x1f\x1d\x9c\xff\x26\xdf\x82\xb3\x2f\x02\xb8\x3a\xf9\xc6\xfd\x0a\x11\x37\x3f\x12\xb6\xf9\xfe\xe5\x55\xd7\xf9\xef\x90\x3d\x3e\x1e\x1d\x4c\x3a\x19\xf0\xc9\x17\xc1\x74\x72\x01\x89\x83\xb9\x5b\x5e\xcd\xa7\x7c\x7d\x15\x78\x91\x4e\xbe\x82\x7a\x77\x74\x08\xa1\xe0\xd3\x7f\x9d\x05\x9f\xfe\x72\xa8\x9c\xc8\x5c\x9e\xc6\xef\xa3\xd1\xc1\x2f\xd5\x3c\xa8\xaf\xba\x40\xe7\xd1\x49\x46\x07\x3f\x29\x3b\x5f\x04\x93\xd9\xc9\xeb\xd9\xbb\x9b\xa3\xcf\x7c\x9f\x57\x9e\x37\x3f\xaa\xb9\xf8\xaa\xe7\xf4\xe4\xf5\x85\xdf\xa7\x23\x2f\xfe\x13\xf1\x03\x19\xa5\xbf\x85\x90\xef\xa8\x7c\x5b\xa3\x67\xeb\xe4\x4b\x58\x3f\x3a\x7e\x45\x8f\x91\x7f\xb7\xbc\x79\xe7\x82\x6a\xb1\x70\x4b\x96\xfc\xaa\x59\x42\x45\xe4\xb3\xfd\xf0\xd3\x4c\xbb\x59\x10\xcc\x16\x27\x7f\xf6\xdb\xfa\xb5\xff\x72\x3b\xce\xb6\xb0\x6f\x5f\xa3\x20\x7b\xe8\xff\xe9\x36\x8e\x0e\x16\x93\xdf\xe4\xfb\x64\xba\xcc\xc6\xa3\x83\x4b\x20\x32\xb8\x25\xfa\x17\xff\x55\x1a\x7f\xf0\x1a\x12\xa0\x26\x27\x7c\x62\x1e\x51\x95\xa3\x6e\x72\x77\xae\xe3\xe0\x1b\x3f\xc5\xd1\xb1\xcd\xc0\x9c\x26\x65\x37\x39\x61\x76\x3f\x78\xfb\xd8\xef\x3d\x3b\x7e\xac\x70\xf3\xe1\x50\x18\xdd\x39\x14\x5e\xfd\xd0\x35\xce\x3f\x24\x80\x68\xf7\x11\x40\x38\x4f\xe3\x56\xd0\x0d\x0a\x26\xfd\x76\x22\x5f\x2f\xde\x4c\xe6\x9e\x44\x3d\x9b\x5d\xac\x8f\xae\x2e\x16\xf7\x48\x7e\xb3\x50\xc1\x3d\xbe\x54\x8d\x7b\xff\xfb\xda\x68\x53\x09\xb4\xfc\x27\xa0\xe6\x8d\x78\x90\x37\x6b\x98\xe5\x95\x5c\xb5\xe2\xe8\xf0\xed\x75\xd4\xbd\xbd\x2e\xea\xb7\xd7\x61\xe1\x9f\xd0\x9e\xf2\xed\x75\xe6\x7c\xbb\xb5\x75\xbe\x4f\x1b\xbf\xbd\x1e\xfb\x7e\x8d\x6f\x6f\xfc\xf7\x98\xcf\xfe\xa9\xfc\x67\x17\xae\xbd\x6f\xf5\x9d\x4b\xd6\xda\xe8\xdf\x78\x5a\x91\x9f\xcf\xb7\x97\x9e\xbe\xf3\x4f\xee\x9f\xce\x3f\xe3\xd4\xd3\xf1\x7f\x53\xdf\xa7\x08\xd7\xf8\xb0\xb9\x79\xd2\xfc\xed\x75\xe2\xc7\xa7\x9d\xf2\x10\xb5\xeb\xfd\x0e\x7b\x3c\x1a\x96\xd8\xec\x65\x08\x87\x7a\xab\x5a\xc3\x31\x6f\x80\x5b\x56\xee\x95\x7f\x75\xb8\xd5\xc5\x1f\xfa\xd7\xc7\xb7\xea\x3e\x4c\x01\x26\xfe\x24\x96\xba\xce\x84\x98\xea\x2d\x1e\xee\x94\xe1\x3e\xdc\xb9\x85\x0b\x31\x78\x4f\xed\x8e\xf2\xbc\xc7\xac\xce\x82\x5d\x52\x04\x98\xcf\x59\x10\xbe\x0a\x30\x83\xb3\x75\x2b\x39\x0a\x8f\xa5\x15\xd5\x3e\x53\xd5\xff\x71\x3a\xb9\x3e\xf2\x7d\xc3\x63\x0f\x66\x15\x33\x7e\x26\xf2\xbd\x17\xa1\xce\x02\x93\x0d\x76\xce\xe4\xff\xdf\x6f\x17\xbd\x7a\xb5\x53\x5b\x71\x40\x7b\xe9\x6a\xe1\xf5\xa8\x8c\x54\x17\x2b\xff\xae\xf5\x3a\x97\xf8\x77\x91\x7f\x0a\xaf\x6b\x5d\xae\xba\x57\x54\xda\x2f\x43\x7f\x3d\xdd\x2c\xf3\x7f\xfd\xf7\xd8\xbf\x1f\xfb\xb6\x38\x55\xbd\xe5\x73\x3d\xf6\xba\xc7\x3b\x3f\xcf\xd8\x3f\x29\x7a\x1e\xa9\x9e\x8f\x7d\x9f\xd4\xeb\x7a\xe4\xc7\x35\xfe\xc9\x7c\x5b\x87\xbe\xfb\xbf\x85\xef\x97\x42\xdf\xf3\x55\xfa\xcf\x75\xa4\xfc\xb4\xbe\xcd\x31\x9f\xe7\xaf\xf6\x73\xd7\x85\xfe\x6d\xfc\xb8\x2e\xd2\xbf\xd8\x49\xe6\xc7\x8d\x7d\x9f\x84\xc7\xf3\xd0\xf5\xf6\xe4\xc7\x37\xa5\xce\x53\x65\x6a\x67\xad\xff\x5e\x3a\x95\x11\xfb\xc2\xa6\xe0\x97\x39\xb0\xab\xb1\x9f\xb7\xaa\xf5\xfd\xd8\xd3\x6a\x42\x5d\xcf\xc8\xf7\xa9\x90\xd3\xd3\xc9\x90\xb1\xd5\x35\x86\x4f\x6c\xad\xf2\xfd\x73\x9e\xb1\xf6\x89\x4a\x9d\x9f\xf5\x0c\x7d\x5b\x15\x29\x6f\x49\xa9\xe3\x58\x3f\xda\x93\x54\xf7\x25\xf2\x34\x4a\xf6\x20\xd3\x75\x82\x4e\x8e\xfc\xb5\xce\x07\x86\xd4\x95\xf2\x9f\x77\xca\x4b\xed\xfb\x86\xb9\xae\x1d\xe3\x0b\x64\xcf\x94\x2e\x7b\xc4\x1a\x87\x7e\x7c\xd2\x29\x4f\x0e\x19\x12\xdd\xa3\xd2\xcf\x51\x1a\xde\x64\xec\x77\x6c\xfb\x11\xeb\xd3\x1a\x3f\xb4\x15\xa5\xea\x48\xea\xbf\x47\x95\xae\x47\x56\xa9\x8e\x84\xad\xf6\x6d\xa1\x91\xea\x7e\xb2\xd7\x65\x66\xba\xd2\xa9\x8e\xa4\xac\x81\xed\x7f\x98\xa9\x6c\x75\xa8\xb2\xc1\x77\xdc\x29\x0d\x64\x62\x4f\x42\xa7\x63\xe1\x3d\x65\x2f\xd0\x99\x9e\xff\x44\xf7\xb3\x40\x07\x23\xdb\x9b\x4c\xb1\x11\x1d\x45\x5f\x5b\xe3\x8d\x36\xf4\x92\xf5\xe9\x9c\xee\x75\xd5\x2a\xa6\xa2\xd3\xd8\x0b\xfb\x86\xbe\xf2\x2e\xf3\xed\x6d\xa1\xfb\x94\xc7\x6a\x03\xe8\x6b\x91\xe8\x5c\xf0\xc1\x3b\xf6\x77\xec\x9f\xa4\x51\xbd\x62\x7d\x8b\x4e\xf5\x91\xf7\xe8\x27\x63\xb1\x29\xf6\x17\x7d\x41\x9e\x96\x7d\x8d\x54\x2f\x52\x78\x2e\x75\xcf\xe9\x0f\xfd\xcc\xec\x26\x6b\x74\x7d\x59\x53\xe4\xc1\x46\xd8\x77\xfc\x80\x4b\x75\xfd\xb0\xb9\xc8\xf6\x28\xa9\x54\x56\xf6\xae\x1c\xab\x6d\xe0\x07\xb0\x09\xd6\x8f\x3d\xc3\x96\xd0\xa7\xd8\xa9\xdd\x83\x09\xce\xf4\x39\xb5\x75\x61\x8f\x5c\xab\x76\x08\x2f\xf8\x13\x6c\x88\xfd\x41\x56\xec\x2f\xcb\x4d\xe7\xd1\xc3\x50\xf5\xa4\x32\x5d\x96\x77\xac\x77\xa6\xf2\x30\x16\xfd\x71\x9d\xd2\x85\xa7\xc2\xa9\x9e\xa6\x95\xda\x2d\x3e\x10\x9d\xad\xfd\xd8\xd2\x6c\x5e\xf4\x0d\x7b\xad\x74\x2f\xeb\x52\xf5\x94\xf6\x2a\x37\x7c\xaa\xd5\x0e\x3a\xf3\x91\xac\x0f\x6b\x5f\x44\xba\x17\x2e\x52\x1b\x46\x0f\x6b\xec\xb4\x50\x1d\x90\xf7\xec\x67\xa7\x3c\xc3\x3b\x78\xc8\x1a\x8b\x4e\x63\xef\xb1\xca\x0b\x56\xb2\xfe\xe0\x26\x7b\xc7\xda\x23\x4b\x37\x56\xdf\xde\x25\x8a\x27\xe8\x10\x32\xb1\x4e\xcc\x11\xa6\x9b\xfe\x39\x8e\x75\x8c\xac\x39\xba\x9e\x9a\xbd\xed\xf6\xcf\x60\xfc\xe3\xbd\x33\x54\x36\x7c\xf3\xea\xd5\x6e\xc7\x4c\x8f\x7d\xdc\xf2\x1a\xeb\xcf\xe1\x94\xd7\xd9\x7f\x29\x1e\xf9\xb5\xa6\xa9\x7f\xbd\xbc\xd8\xcb\x2f\x83\xfb\xe8\x61\x03\xe6\x7b\xdd\x6f\xe2\x95\x5f\x1e\x9b\x5f\xee\x5a\xf5\xcb\xd8\x3d\xfe\x09\x9d\x82\x36\x38\x52\xf4\xb6\x54\x29\xc6\x8b\x6f\x6f\x14\x53\xa3\x5a\x63\x44\xda\xc1\x44\x7c\x1d\x3c\x80\x9d\xe0\x16\xed\x60\x77\x56\xeb\x1c\xd8\x17\xf8\x92\x99\xdf\x85\x07\x68\x81\x1d\xb5\xd9\x4a\x6e\xf6\x8a\xbe\x8b\xdf\x4b\x2d\xb6\x28\xd5\x07\xc1\x07\x38\x07\x8e\x60\x27\xd8\x7b\x67\x98\x01\x3e\xe3\x93\x98\x47\xda\xc6\x16\x1f\x64\x6a\x43\xe0\x30\x36\x22\x18\x46\xdf\x4a\xf1\x9d\x78\x42\xb0\xbe\x53\x5f\x80\x9d\x23\x8f\xc4\xce\xb9\xe2\x05\xf2\x82\x3f\x89\xe1\x00\x78\x88\xaf\x0c\x1b\xc5\xa7\xca\xe2\x16\x70\x03\xb9\x4a\xf3\x47\x8c\x91\x35\x8a\x74\x4d\x6b\xb3\x7f\xfa\xc1\x43\x6a\xfe\x86\xb8\xa6\x35\xfc\x01\x77\xd8\xc7\x3a\x56\x59\x7b\x3f\x0e\x26\xb3\x36\x89\xc5\x57\xe0\x19\x7d\x23\xd6\xde\xbf\x0b\x2b\xa5\x83\xaf\x14\xd9\x1b\xc5\x2f\xe7\x74\x7f\x59\x4b\xe2\x98\xb2\x50\xec\x04\x63\x90\x41\x7c\x6f\xa9\xbe\x01\xf9\xf0\x63\x60\x18\xb8\x8e\x4f\x40\x2f\xc0\x5f\xe2\xff\x6c\xac\xd8\x19\x9b\x2f\x08\xa3\x01\x5c\x4a\x95\x0f\xf4\x8c\x75\x07\xd3\x1e\x90\x37\xac\x34\xfd\xf1\xe8\xb4\xa2\xb5\x81\x51\x9b\xe5\x9f\xdd\x58\xb5\x22\xb5\x0f\x62\x6d\x08\xf5\x1c\xb8\x35\x24\xd2\x1f\x89\x5f\xdf\x51\xcc\x7c\x92\xf4\x17\xd3\x23\x1c\x8a\x2b\x85\x09\x49\x6d\x2d\x54\xc2\x75\xae\xf7\x19\x4a\x93\xa1\x95\xc4\x1a\x02\xa3\x86\x4d\xa5\x61\x39\x6a\x9c\x57\xea\xca\x99\xbb\x04\x7a\x9c\x9a\x91\xc0\x99\x53\x33\x4a\x9d\x86\x57\x84\x34\x40\x0d\xfd\x99\x1b\x28\x05\x82\xe0\x4b\xdc\x7e\xae\xf3\x62\xde\x40\x07\xa1\x9f\x98\x48\x64\x61\xa5\x85\xcd\x84\xe9\x12\x82\xf6\xa1\x4b\xad\xef\x18\x17\x5b\xc8\x22\xe9\xb8\xc1\xe3\x5d\xd3\xaa\x2c\xfc\x2f\x53\x85\x06\x78\xda\x62\x5a\x1b\x9b\xb0\x9f\x55\x6d\x90\x59\x19\xd4\x40\xf1\x7b\xd3\x94\x36\xc6\x3f\xd4\x8a\xb6\xf1\xff\xa4\x06\x34\x28\xc2\x0b\x31\x9d\xbd\x73\x71\x62\x7d\x72\x38\x7c\x2c\x0a\x82\x7f\xea\x7d\xbe\x6b\xd4\x17\xe3\x0b\x50\xd8\xd6\xea\x3b\x18\x03\xf1\x33\x4a\x58\x15\x5a\x5f\x82\x06\xdf\xf1\x2b\xf8\x5d\x0c\x48\xfc\x49\xad\x3e\xc2\xc5\xea\x53\x31\x94\xc8\x94\x5b\xf2\xbe\x5c\x79\x68\xcd\xb8\xf0\x05\xc4\xd8\xf8\x14\x0c\x90\x38\xd8\x99\x4f\x97\xbc\x26\x51\x9f\x9d\x5b\x9c\x2b\x86\xdd\xaa\xc1\x23\x4f\x62\x75\x00\x72\xc5\xb2\xd6\xfc\x2e\x2f\x2c\x1f\xf6\x74\xe2\x4c\xfd\x7d\x63\xf1\x80\xf8\xde\x4e\xe5\xc5\x18\xc9\xff\xf1\x79\xc4\x36\xf0\x92\x67\xca\x37\x71\x3b\x31\x76\x14\x69\x5c\xd3\x58\xce\x8d\xaf\x23\x5e\xa2\x3e\x50\x9a\x6f\x27\x6e\x70\x96\x57\x4a\xcc\x51\x2a\x30\x90\x0f\x00\x1e\x7d\x1e\x4d\x0c\x04\x20\x75\x96\xf7\x49\x7e\x68\x39\x3a\x39\x91\xb3\xbc\x81\x36\x40\x85\xf5\x42\x66\xc9\xa1\x6a\x9d\x17\xb9\xc8\x5d\xf9\xcb\xba\xd4\x8d\xc6\x1b\x80\x56\x61\xb9\x27\x39\x24\x7b\x43\x0c\x84\xdc\xe4\x10\x65\xa7\xeb\x40\xcc\xc6\x3c\x92\x8f\xa7\x96\xcf\xa5\x0a\x84\x85\xe5\x2f\x99\xad\x03\xf3\x03\xa8\xec\x3f\x7d\x9c\xcd\x43\x1f\xf4\x80\xdc\x1a\x3d\xa2\x2f\xf5\x0d\xd1\x9f\x4a\x81\x16\x9d\x63\xfd\x98\x8b\x78\x02\xd0\x94\xfd\x42\x57\x2c\xc6\x63\xcf\xf3\x46\xf7\x3c\xb5\xbc\xba\xb0\xba\x45\x42\xdc\x99\x29\x1d\xf6\x29\xb1\xdc\x13\xdd\x24\x26\x41\x0f\xa4\x86\x62\x35\x0b\x72\x78\x74\x94\x75\x4f\xad\xde\x82\x5e\xd4\xf6\x19\xf0\x8c\x4d\xb7\x53\xfb\x2c\xfb\x57\x5b\x2e\x59\x69\xdc\x04\x68\x4b\x1c\x5b\x69\x6c\x99\x99\x3e\xb3\xe6\xc4\x59\xac\x35\x73\xc7\x89\xd6\x6d\xd0\x31\x62\x2c\xc9\x2f\x73\xab\x17\xb5\xfa\x1e\x07\x84\x9e\xe1\x6c\xd8\xf3\xd2\xf4\x03\x1d\x80\x2e\xce\x01\xf9\xd1\x5b\xd6\x24\x6c\x37\x41\x1d\xdd\x80\x1f\xf6\xb3\x8f\x67\x57\x71\xd5\x36\x50\xdf\x3f\x8d\xbb\x43\xe4\x2e\xa0\xef\x4a\xe2\xee\x0c\xdd\x03\xcb\x9f\x2b\x85\xdb\xe4\xfd\x85\xc0\xf8\x23\x13\xb8\x3e\xc2\x18\xb7\x9a\x10\x38\x8b\x66\x00\x67\x29\x32\x59\x64\x84\x52\x12\x99\x00\x76\xbc\xa7\xd8\x49\xf1\x0c\xa3\x07\x60\x29\x40\x90\x48\xa4\xf6\x9d\x84\x80\xe4\x44\x12\xbc\x6a\x05\xf2\xfc\x6d\xfa\x02\x88\x15\x49\x24\xa9\x49\x15\x24\xc2\x74\x75\x80\x10\x5b\x1b\x00\xcc\x43\xa2\xd5\xf7\x19\x5b\xbf\xd8\xfe\xf6\x34\x31\x7c\x8a\x72\xb4\xf3\x19\xd0\x15\xa0\xb5\xa2\x1e\x0f\x86\x29\x4e\xc5\x22\x1d\x40\x83\xc2\x46\xd4\x03\xc2\x58\x93\xb0\xc2\x0a\x5e\x91\x81\x6b\x69\x9f\xfb\x87\xe4\x05\x19\xa4\x98\x6c\x80\x2a\x86\x66\x89\x5d\x3c\x10\x61\xe1\x24\xa0\x4d\x71\x05\x50\x05\xac\xee\x8f\xb0\x1e\x9b\xbb\x0c\x92\xba\x6b\x98\x0f\xc9\x5c\x06\x09\xed\x61\xa6\xcf\x9b\xb7\x6c\x97\xe7\x0f\x35\xda\xab\xfa\xe6\x3f\x2a\x6b\xd9\xaa\xc3\xa5\x16\x59\xc8\x64\x72\x2b\xe6\x6f\xd3\xe1\x3b\x32\xef\xa9\xbe\x77\xa8\xac\x69\xee\xc6\x65\x95\x01\x9d\xbd\x33\xfa\xc1\xea\x3a\xcc\xfb\xd3\x6a\xea\x00\xff\x2f\x43\x47\xf7\x4e\x0f\xe4\xc8\xb7\x33\xcd\x74\x16\x16\xf7\x47\x75\x63\x45\x3d\xc2\x35\x90\x39\xb6\xe3\x32\x34\x93\xd0\x56\x4a\x47\x85\x6a\x32\xe1\x4d\x59\x69\x28\xde\xd9\xf1\x03\xde\x43\xc2\xb5\xd6\x3c\x8a\x85\xeb\xa5\x1d\x19\x41\x2b\xb5\x72\x14\x21\x19\xde\x8a\x63\x91\x2c\xd6\x52\x3f\x61\x7b\x66\xc8\x4e\xca\xc0\xf1\x49\x6e\xc7\x4a\xf0\x4b\x39\x53\x4a\x7b\xb9\x85\x6e\x76\x8c\x3d\xb6\xf2\xba\x84\x91\x91\x7a\x11\x42\xba\xdc\xbc\x06\x61\x2e\xe9\x09\xde\x8e\xd4\xa2\x4f\x1b\x62\xf3\x26\x94\xef\x09\x75\xe5\xe8\x31\x57\x6f\x02\xff\x1c\xcb\x90\xbf\x53\xca\x23\xd4\xc4\x12\x79\x28\x81\xe1\xed\xa4\x3c\x18\x6b\x58\x4c\x38\x8b\xc5\x52\x6e\x93\x63\xae\x48\x2d\x36\x29\xb4\xae\x50\x19\xff\x94\x4d\x5b\x3b\xfa\xa3\x34\x2b\xc7\x9c\xa1\xd1\x0c\x55\x5e\x99\xd7\xc2\x4b\xd6\xb0\x0f\x7b\x13\x4b\x53\xe4\xc8\xaf\xd6\x50\x3c\x5e\x4b\x09\x08\x81\xc3\x4e\xf7\x04\xfa\x52\x4a\xcc\x56\xa5\x4b\xf8\x2b\xcc\x13\x92\xca\x38\x3b\x22\x63\x3c\x6b\xe2\xac\x54\x4b\x9b\xb3\x7a\x48\x65\x69\xa2\x5c\x17\xa8\x15\x81\xe4\xc8\xc4\x29\xc2\xb1\x77\xb4\x31\x57\x67\xc7\x52\x82\x44\x84\xca\x89\xee\x2b\x9f\xe5\xd8\xaa\xd4\xa8\xa4\xb5\x74\x8f\xa3\x56\x39\x1a\xb4\x2b\x0d\x1c\x6b\x4a\x2d\x24\xd1\x74\x22\x4c\x36\xd1\x0d\x1d\x97\x63\x9b\xde\x9b\x57\xdb\xc3\xe5\x0f\xac\xe5\xb1\xd8\x76\x27\x58\xfe\xf0\x86\xdd\x2e\x58\xfb\xa8\x50\x79\x88\xe5\xa7\x87\xb4\x17\x13\x28\xdf\x8a\xfb\x14\x07\x1d\x8d\x26\xd0\x58\x6e\x61\x17\x10\x28\xd0\x83\x26\xce\x0a\xd6\x12\x97\x86\x76\x58\x59\x2a\xa2\x61\xe1\xc4\x84\x24\x68\x8c\xc1\xda\x42\xf3\xbb\x1c\x60\xa2\xb5\x20\x91\x14\xe0\x5b\xd5\x5e\xac\x07\x4b\x02\xe9\xb0\x3a\x50\x05\x6b\xa4\x88\x2e\x9a\x1a\xeb\xa1\x27\xd6\x8f\x45\x92\xf8\x61\xdd\x24\xe5\x54\x0b\x65\x0e\x3b\xb8\x96\x43\xf6\x46\x13\x7d\xf8\x24\x49\x15\x14\xb4\x03\x6d\x50\x0e\x7f\x0e\x02\x50\x68\x88\xec\x40\x94\x84\x98\xdc\x40\x0e\x68\x9d\xc6\xc9\x14\x17\x42\x3b\x5c\xa0\x2f\x9f\xa5\x30\xd2\x5a\x52\x5c\xac\x0a\x03\x72\x40\xe3\x54\x46\x39\xa0\x76\xca\x2b\x56\x0e\xba\x93\x43\x50\x7c\xc1\x1a\x29\x82\x44\xc6\x33\x1e\x80\x02\x0f\xb2\x49\x85\xb4\x31\xf4\x2a\x94\x56\x65\x05\x09\x1e\x0a\x1b\x72\x30\x51\xeb\x61\x83\x1c\xac\x47\xba\xa6\x9d\xf1\x44\x7f\xe2\x1d\xaa\xaa\x82\x98\x76\xc1\xa1\xb3\x43\x76\x10\x26\xb4\xc3\x7b\x0e\x4a\x41\x0c\x2e\x65\x84\x76\x40\x0e\xbf\x14\x92\x28\x38\xd5\xcd\x30\x6a\x54\x76\x58\x21\x09\x76\x6a\xeb\x74\x5f\x4c\xf4\xe8\xb0\x7e\x80\xd2\x1d\x04\x79\x50\x50\x3f\x40\xe6\xe3\xf1\xe4\x99\x43\xfa\x6d\xc2\xfc\x91\xe8\xf2\xbd\x5e\x36\xfe\x5f\x0b\xea\x07\xc4\xde\x4f\x7f\x07\x08\xad\xd4\x77\xf0\x5a\xf8\xa6\xf2\x0e\xd0\x78\xa8\xee\x6e\x97\xe3\x49\x55\x77\x8b\x20\x2f\x46\x71\x1f\x1f\xe9\x47\xf6\x6e\xbc\x16\xe9\x67\x77\x22\xfd\xb1\x1e\xc2\xf7\x91\x3e\x18\x8c\xcf\xc3\xbf\x10\xb9\x12\xa9\xa2\xea\x60\x6e\x6d\x9f\xa5\x88\x1c\xea\x85\x1c\xfc\xe6\xd8\x70\xb7\xe9\x7d\x61\x66\xd1\x9a\x15\x40\x2b\x8b\x30\xa5\x4e\x65\x45\x74\xf8\x80\x57\x67\x97\xf8\xf0\x2d\x44\x80\xd4\x6c\x28\x08\x4b\xd4\xdc\x68\x1d\x48\x2e\xdb\xf5\xa7\x6e\xe6\xdb\xc0\xfd\xd4\x4e\xe5\x5a\xbb\xcc\xda\xd8\x25\x3e\x39\xc0\x70\xba\x4e\xf8\x06\xb9\x7c\x65\x97\x0b\x0b\x2b\x6e\xcb\xa5\xae\x62\x55\x78\x95\x03\xfa\x50\xe9\x32\x8e\xcb\x45\x64\x11\xf8\x2c\xc9\x5e\x72\x8d\x74\x63\xcb\x48\x62\x2b\xd8\xc3\x9f\x5c\x34\xea\xb4\x2e\x57\xd8\xc1\x7d\x6b\x87\xf3\xad\x5d\xfa\xca\x73\xcd\x4e\xf0\xc7\x72\xca\x67\xb1\x44\x62\x26\xcd\x7a\x31\x97\x14\xb7\x4b\xed\x87\x9f\x25\x1a\xa7\x4f\xd3\x5f\x70\xb3\x0b\x05\x9d\x45\xe2\xce\x22\x7f\xb9\xb4\x18\x69\x46\xc2\x78\xf1\xe1\xce\x0e\x1c\xec\x32\x57\x68\x97\xce\xd8\xd3\xc4\x2e\x37\xca\x01\x80\xd3\x36\x78\xa2\x3f\x19\x9a\x64\x78\xa9\xca\x20\xd1\x7a\xa6\xfb\xc2\xa1\x09\xd1\xbd\xb3\x48\x5f\x2e\x79\x74\xab\xcb\x6d\xb4\xc1\x33\x7b\x44\xbd\x11\xdf\x2b\x59\x45\xab\x6b\xcc\x3b\xb9\x24\x99\xac\x0e\x18\xd0\x55\x6a\x81\x43\x97\x9d\x88\x59\x58\x97\x5e\x77\xe4\xc2\xe4\x70\xd4\xbf\x61\x3c\x4f\x00\x7e\x1f\xc6\xfe\x9b\xbf\x74\xb9\x07\xf7\x3e\x26\x03\xd8\xc6\xfe\xb3\x60\xde\x4b\xc9\x03\x3e\x10\xfa\xff\x25\xf3\xff\xd6\x92\xf9\x96\x6d\x7e\x02\x03\x1d\x0a\xb0\xb7\xff\xd6\xec\x1e\x73\xfd\xf8\x30\x7b\xb7\x60\xcf\x62\xba\x2f\x2d\xd8\xfe\x51\x7f\x5f\xf7\x74\x3f\x7b\xd9\xf1\xb3\x16\xd4\x2d\xb4\xab\x89\x43\x9e\x82\x08\x27\xb6\xab\x80\x62\xaa\xc3\xea\x38\xc0\xf2\x7e\xaa\x38\x40\x68\xa5\x86\x83\xbf\x62\xdc\xd4\xc0\x01\x1a\x0f\xd5\xbe\xed\x72\x3c\xa9\xe6\x6d\x11\xe4\xc5\x28\xdd\xde\x81\x32\x01\x1e\xc1\x58\x7f\x7b\x85\xdb\x05\xf2\xab\x93\x76\xe5\x2d\x50\x45\x8a\x16\xb5\xdd\xa4\x20\x40\x96\x5f\xb9\x58\xa1\x09\x95\xc4\xd3\x40\x4b\x0a\x3a\x76\x43\x42\xd0\x39\xd4\x9b\xa5\xfc\x1d\x9b\x0a\xc7\x76\xcb\x66\x9b\x1a\x13\x80\xf2\xeb\x84\xcc\x6e\x70\x44\xdd\xc3\xd4\x78\xff\x80\x67\x83\xcc\xa6\x0a\xef\x0a\x78\x36\x86\xef\xa5\xbd\xcf\x15\xf0\x0c\x49\xf0\x62\x14\xf7\x91\x01\x0f\xa5\x84\xb1\x05\x34\x3c\xfc\x38\xe1\x63\x82\x1e\x10\x76\x9b\x1a\x12\x48\xc8\x85\xe7\xc8\x2e\xc3\x44\x0f\x53\xc3\x8f\x75\xee\xff\x0e\x00\x00\xff\xff\xbd\xa3\x39\x12\x00\x40\x00\x00")

func templatesGoBytes() ([]byte, error) {
	return bindataRead(
		_templatesGo,
		"templates.go",
	)
}

func templatesGo() (*asset, error) {
	bytes, err := templatesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates.go", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"init/django/.dockerignore": initDjangoDockerignore,
	"init/django/Dockerfile": initDjangoDockerfile,
	"init/django/docker-compose.yml": initDjangoDockerComposeYml,
	"init/rails/.dockerignore": initRailsDockerignore,
	"init/rails/Dockerfile": initRailsDockerfile,
	"init/rails/docker-compose.yml": initRailsDockerComposeYml,
	"init/ruby/.dockerignore": initRubyDockerignore,
	"init/ruby/Dockerfile": initRubyDockerfile,
	"init/ruby/docker-compose.yml": initRubyDockerComposeYml,
	"init/sinatra/.dockerignore": initSinatraDockerignore,
	"init/sinatra/Dockerfile": initSinatraDockerfile,
	"init/sinatra/docker-compose.yml": initSinatraDockerComposeYml,
	"init/unknown/.dockerignore": initUnknownDockerignore,
	"init/unknown/Dockerfile": initUnknownDockerfile,
	"init/unknown/docker-compose.yml": initUnknownDockerComposeYml,
	"templates.go": templatesGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"init": &bintree{nil, map[string]*bintree{
		"django": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initDjangoDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initDjangoDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initDjangoDockerComposeYml, map[string]*bintree{}},
		}},
		"rails": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRailsDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRailsDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRailsDockerComposeYml, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initRubyDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initRubyDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initRubyDockerComposeYml, map[string]*bintree{}},
		}},
		"sinatra": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initSinatraDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initSinatraDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initSinatraDockerComposeYml, map[string]*bintree{}},
		}},
		"unknown": &bintree{nil, map[string]*bintree{
			".dockerignore": &bintree{initUnknownDockerignore, map[string]*bintree{}},
			"Dockerfile": &bintree{initUnknownDockerfile, map[string]*bintree{}},
			"docker-compose.yml": &bintree{initUnknownDockerComposeYml, map[string]*bintree{}},
		}},
	}},
	"templates.go": &bintree{templatesGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

